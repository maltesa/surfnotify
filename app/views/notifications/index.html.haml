= link_to 'Create Notification', new_notification_path, class: 'btn btn-outline-primary btn-lg pull-right'
%h1 Your Notifications
%hr
.card-columns
  - @notifications.each do |notification|
    - matching_fc = notification.matching_forecasts
    - next_match = matching_fc.first
    - btn_silent = notification.silent ? 'btn-outline-success' : 'btn-outline-warning'
    - icon_silent = notification.silent ? 'fa-volume-up' : 'fa-volume-off'
    .card{ class: (notification.silent || matching_fc.none?) ? '' : 'border-success' }
      .card-header{ class: (notification.silent || matching_fc.none?) ? '' : 'text-success' }
        %i.fa{ class: notification.silent ? 'fa-circle-o' : 'fa-circle' }
        = notification.forecast.spot_name
        .pull-right
          = link_to silence_notification_path(notification), class: "btn btn-sm #{btn_silent}"  do
            %i.fa{ class: icon_silent }
          .btn-group.ml-1
            = link_to edit_notification_path(notification), class: 'btn btn-sm btn-outline-primary'  do
              %i.fa.fa-pencil
            = link_to notification_path(notification), method: :delete, data: { confirm: 'Do you really want to delete the notification?' }, class: 'btn btn-sm btn-danger' do
              %i.fa.fa-trash
      .card-body
        - if notification.forecast.forecast.none?
          %span.font-italic Waiting for forecast data ...
        - else
          - notification.activated_rules_with_params.each do |rule|
            %strong= "#{rule[:name]}: "
            - if next_match.present?
              - value = rule[:getter].call(next_match.second.try(:[], rule[:key].to_s))
              - if value.is_a?(Array)
                = value.map{ |v| "#{v} #{rule[:unit]}" }.join(', ')
              - elsif value.present?
                = "#{value} #{rule[:unit]}"
              - else
                %span.font-italic No data
            - else
              %i.fa.fa-frown-o
            %br
      .card-footer
        %small
          = link_to 'show forecast', notification.spot, class: 'pull-right'
          - if next_match.present?
            %strong Next match:
            = l DateTime.strptime(next_match[0], '%s')
          - else
            No match
    %br
